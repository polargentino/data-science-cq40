"""
Qwen2.5-Max
7:22 pm
¬°Vamos a resolver este proyecto paso a paso! Vamos a implementar las clases Rectangle y Square 
seg√∫n las especificaciones proporcionadas. La clase Square ser√° una subclase de Rectangle y 
heredar√° sus m√©todos y atributos.

Explicaci√≥n del C√≥digo:
-----------------------
*-Clase Rectangle:
-----------------
1-Constructor (__init__) :
-------------------------
Inicializa los atributos width y height.

2-M√©todos set_width y set_height :
----------------------------------
Permiten modificar el ancho y alto del rect√°ngulo.

3-M√©todo get_area :
------------------
Calcula el √°rea multiplicando el ancho por el alto.

4-M√©todo get_perimeter :
-----------------------
Calcula el per√≠metro sumando dos veces el ancho y dos veces el alto.

5-M√©todo get_diagonal :
-----------------------
Calcula la diagonal usando el teorema de Pit√°goras.

6-M√©todo get_picture :
---------------------
Genera una representaci√≥n gr√°fica del rect√°ngulo usando asteriscos (*). Si el ancho o alto es 
mayor que 50, devuelve un mensaje indicando que es demasiado grande.

7-M√©todo get_amount_inside :
---------------------------
Calcula cu√°ntas veces cabe otra forma dentro del rect√°ngulo dividiendo las dimensiones enteras.

8-M√©todo __str__ :
------------------
Devuelve una representaci√≥n en cadena del objeto rect√°ngulo.

*-Clase Square:
--------------
1-Constructor (__init__) :
--------------------------
Llama al constructor de la clase base (Rectangle) y establece tanto el ancho como el alto al valor del lado.

2-M√©todo set_side :
-------------------
Establece tanto el ancho como el alto al valor del lado.

3-M√©todos set_width y set_height :
----------------------------------
Sobrescriben los m√©todos de la clase base para asegurarse de que el ancho y el alto siempre sean iguales.

4-M√©todo __str__ :
------------------
Devuelve una representaci√≥n en cadena del objeto cuadrado.


*-Conclusi√≥n
Esta implementaci√≥n cumple con todas las reglas y condiciones especificadas. 
La clase Rectangle maneja correctamente los c√°lculos y representaciones, mientras que 
la clase Square hereda y extiende su funcionalidad. ¬°Espero que esta soluci√≥n sea √∫til! üòä

"""

class Rectangle:
    def __init__(self, width, height):
        """Inicializa un rect√°ngulo con ancho y alto."""
        self.width = width
        self.height = height

    def set_width(self, width):
        """Establece el ancho del rect√°ngulo."""
        self.width = width

    def set_height(self, height):
        """Establece la altura del rect√°ngulo."""
        self.height = height

    def get_area(self):
        """Calcula el √°rea del rect√°ngulo."""
        return self.width * self.height

    def get_perimeter(self):
        """Calcula el per√≠metro del rect√°ngulo."""
        return 2 * self.width + 2 * self.height

    def get_diagonal(self):
        """Calcula la diagonal del rect√°ngulo."""
        return (self.width ** 2 + self.height ** 2) ** 0.5

    def get_picture(self):
        """Devuelve una representaci√≥n gr√°fica del rect√°ngulo usando '*'."""
        if self.width > 50 or self.height > 50:
            return "Too big for picture."
        picture = ""
        for _ in range(self.height):
            picture += "*" * self.width + "\n"
        return picture

    def get_amount_inside(self, shape):
        """Calcula cu√°ntas veces cabe otra forma dentro de este rect√°ngulo."""
        return (self.width // shape.width) * (self.height // shape.height)

    def __str__(self):
        """Representaci√≥n en cadena del rect√°ngulo."""
        return f"Rectangle(width={self.width}, height={self.height})"
    

class Square(Rectangle):
    def __init__(self, side):
        """Inicializa un cuadrado con un lado dado."""
        super().__init__(side, side)

    def set_side(self, side):
        """Establece el lado del cuadrado."""
        self.width = side
        self.height = side

    def set_width(self, width):
        """Establece el ancho y alto del cuadrado."""
        self.width = width
        self.height = width

    def set_height(self, height):
        """Establece el ancho y alto del cuadrado."""
        self.width = height
        self.height = height

    def __str__(self):
        """Representaci√≥n en cadena del cuadrado."""
        return f"Square(side={self.width})"
    
# Ejemplo de Uso:

rect = Rectangle(10, 5)
print(rect.get_area())  # Salida: 50
rect.set_height(3)
print(rect.get_perimeter())  # Salida: 26
print(rect)  # Salida: Rectangle(width=10, height=3)
print(rect.get_picture())
# Salida:
# **********
# **********
# **********

sq = Square(9)
print(sq.get_area())  # Salida: 81
sq.set_side(4)
print(sq.get_diagonal())  # Salida: 5.656854249492381
print(sq)  # Salida: Square(side=4)
print(sq.get_picture())
# Salida:
# ****
# ****
# ****
# ****

rect.set_height(8)
rect.set_width(16)
print(rect.get_amount_inside(sq))  # Salida: 8

# Salidas:
# 50 (√Årea del rect√°ngulo)
# 26 (Per√≠metro del rect√°ngulo despu√©s de ajustar la altura)
# Rectangle(width=10, height=3) (Representaci√≥n en cadena del rect√°ngulo)
# ********** (Representaci√≥n gr√°fica del rect√°ngulo)
# **********
# **********

# 81 (√Årea del cuadrado)
# 5.656854249492381 (Diagonal del cuadrado despu√©s de ajustar el lado)
# Square(side=4) (Representaci√≥n en cadena del cuadrado)
# **** (Representaci√≥n gr√°fica del cuadrado)
# ****
# ****
# ****

# 8
         