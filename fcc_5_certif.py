"""
Qwen2.5-Max
7:24 pm
춰Vamos a resolver este proyecto paso a paso! Vamos a implementar la clase Hat y la 
funci칩n experiment para calcular la probabilidad aproximada de extraer ciertas bolas de un sombrero.

Explicaci칩n del C칩digo:

*-Clase Hat:
------------
1-Constructor (__init__) :
--------------------------
Acepta un n칰mero variable de argumentos clave-valor que representan los colores y cantidades de bolas.
Convierte estos argumentos en una lista llamada contents, donde cada elemento es un color que representa una bola.

2-M칠todo draw :
---------------
Extrae un n칰mero espec칤fico de bolas del sombrero sin reemplazo.
Si el n칰mero de bolas solicitadas es mayor o igual al total de bolas disponibles, devuelve todas las 
bolas y vac칤a el sombrero.
Usa random.sample para seleccionar bolas aleatorias sin reemplazo.

*-Funci칩n experiment:
--------------------
1-Par치metros :
-------------
* hat: Un objeto Hat que contiene las bolas.
* expected_balls: Un diccionario que indica las bolas esperadas (por ejemplo, {'red': 2, 'green': 1}).
* num_balls_drawn: El n칰mero de bolas a extraer en cada experimento.
* num_experiments: El n칰mero de experimentos a realizar.

2-L칩gica del Experimento :
--------------------------
Para cada experimento, se crea una copia del sombrero original para evitar modificar el sombrero inicial.
Se extraen las bolas especificadas usando el m칠todo draw.
Se cuenta cu치ntas veces aparece cada color en las bolas extra칤das.
Se verifica si las bolas extra칤das cumplen con las condiciones especificadas en expected_balls.

3-C치lculo de la Probabilidad :
------------------------------
Se cuenta cu치ntos experimentos fueron exitosos (es decir, cumplieron con las condiciones).
La probabilidad se calcula como la proporci칩n de experimentos exitosos sobre el total de experimentos.


*-Conclusi칩n
Esta implementaci칩n cumple con todas las reglas y condiciones especificadas. La clase Hat maneja 
correctamente la creaci칩n del sombrero y la extracci칩n de bolas, mientras que la funci칩n experiment 
realiza simulaciones para estimar la probabilidad. 춰Espero que esta soluci칩n sea 칰til! 游땕


"""
import random

class Hat:
    def __init__(self, **balls):
        """Inicializa el sombrero con las bolas especificadas."""
        if not balls:
            raise ValueError("El sombrero debe contener al menos una bola.")
        
        # Crear la lista de contenidos del sombrero
        self.contents = []
        for color, count in balls.items():
            self.contents.extend([color] * count)

    def draw(self, num_balls):
        """Extrae un n칰mero espec칤fico de bolas del sombrero sin reemplazo."""
        if num_balls >= len(self.contents):
            # Si se piden m치s bolas de las disponibles, devolver todas
            drawn_balls = self.contents[:]
            self.contents.clear()
            return drawn_balls
        
        # Extraer bolas aleatorias sin reemplazo
        drawn_balls = random.sample(self.contents, num_balls)
        for ball in drawn_balls:
            self.contents.remove(ball)
        return drawn_balls
    

def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    """Realiza experimentos para calcular la probabilidad aproximada."""
    successful_experiments = 0

    for _ in range(num_experiments):
        # Copiar el sombrero original para cada experimento
        hat_copy = Hat(**{color: hat.contents.count(color) for color in set(hat.contents)})
        drawn_balls = hat_copy.draw(num_balls_drawn)

        # Contar las bolas extra칤das
        drawn_counts = {color: drawn_balls.count(color) for color in set(drawn_balls)}

        # Verificar si se cumple la condici칩n esperada
        success = True
        for color, count in expected_balls.items():
            if drawn_counts.get(color, 0) < count:
                success = False
                break

        if success:
            successful_experiments += 1

    # Calcular la probabilidad
    probability = successful_experiments / num_experiments
    return probability


# Ejemplo de Uso:
# Crear un sombrero con bolas
hat = Hat(black=6, red=4, green=3)

# Realizar el experimento
probability = experiment(
    hat=hat,
    expected_balls={'red': 2, 'green': 1},
    num_balls_drawn=5,
    num_experiments=2000
)

print(probability)
# Salida: 
# 0.363
# Dado que esta simulaci칩n se basa en n칰meros aleatorios, el resultado variar치 ligeramente 
# cada vez que se ejecute el c칩digo. Sin embargo, con un n칰mero suficientemente grande de 
# experimentos (num_experiments), el resultado converger치 hacia la probabilidad real.
