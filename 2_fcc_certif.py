"""
https://chat.qwenlm.ai/

Explicaci칩n del C칩digo

1-Entrada y Extracci칩n de Datos :
---------------------------------

Se divide la hora de inicio (start_time) en horas, minutos y per칤odo (AM/PM).
Se convierte la hora de inicio a formato de 24 horas para facilitar los c치lculos.
Se extrae la duraci칩n en horas y minutos.

2-C치lculo del Tiempo Total :
----------------------------

Se calcula el tiempo total en minutos sumando los minutos de la hora de inicio y la duraci칩n.

3-Conversi칩n a Horas y Minutos :
--------------------------------

Se calculan las nuevas horas y minutos utilizando operaciones de divisi칩n y m칩dulo.
Se determina si el per칤odo es AM o PM basado en las nuevas horas.

4-D칤as Pasados :
----------------

Se calcula cu치ntos d칤as han pasado dividiendo el tiempo total en minutos entre el n칰mero de 
minutos en un d칤a (1440).

4-Formateo del Resultado :
--------------------------
Se construye el resultado con el formato adecuado.
Si se proporciona un d칤a de inicio, se calcula el nuevo d칤a de la semana.
Se agrega informaci칩n sobre los d칤as pasados si es necesario.

*-Conclusi칩n:
-------------
Esta implementaci칩n cumple con todas las reglas y condiciones especificadas. 
Es robusta, maneja correctamente los cambios de d칤a y los d칤as de la semana, 
y produce el formato deseado. 춰Espero que esta soluci칩n sea 칰til! 游땕

"""


def add_time(start_time, duration, start_day=None):
    # Diccionario para mapear d칤as de la semana (en min칰sculas)
    days_of_week = ["monday", "tuesday", "wednesday", "thursday", "friday", "saturday", "sunday"]

    # Extraer la hora de inicio y el per칤odo (AM/PM)
    time, period = start_time.split()
    start_hour, start_minute = map(int, time.split(":"))
    
    # Convertir a formato de 24 horas
    if period.upper() == "PM" and start_hour != 12:
        start_hour += 12
    elif period.upper() == "AM" and start_hour == 12:
        start_hour = 0

    # Extraer la duraci칩n
    duration_hours, duration_minutes = map(int, duration.split(":"))

    # Calcular el tiempo total en minutos
    total_minutes = start_hour * 60 + start_minute + duration_hours * 60 + duration_minutes

    # Calcular las nuevas horas y minutos
    new_hour = total_minutes // 60 % 24
    new_minute = total_minutes % 60

    # Determinar si es AM o PM
    period = "AM"
    if new_hour >= 12:
        period = "PM"
    if new_hour > 12:
        new_hour -= 12
    elif new_hour == 0:
        new_hour = 12

    # Calcular el n칰mero de d칤as pasados
    days_passed = total_minutes // (24 * 60)

    # Formatear el resultado
    result = f"{new_hour}:{new_minute:02d} {period}"

    # Agregar el d칤a de la semana si se proporciona
    if start_day:
        start_day = start_day.lower()
        if start_day in days_of_week:
            current_day_index = days_of_week.index(start_day)
            new_day_index = (current_day_index + days_passed) % 7
            new_day = days_of_week[new_day_index].capitalize()
            result += f", {new_day}"

    # Agregar informaci칩n sobre los d칤as pasados
    if days_passed == 1:
        result += " (next day)"
    elif days_passed > 1:
        result += f" ({days_passed} days later)"

    return result

# Ejemplos de Uso:

# Ejemplo 1: Sin D칤a de Inicio
print(add_time("3:00 PM", "3:10"))
# Salidas: 
# 6:10 PM

# Ejemplo 2: Con D칤a de Inicio
print(add_time("11:30 AM", "2:32", "Monday"))
# Salidas:
# 2:02 PM, Monday

# Ejemplo 3: Cambio de D칤a
print(add_time("10:10 PM", "3:30"))
# Salidas:
# 1:40 AM (next day)

# Ejemplo 4: M칰ltiples D칤as y D칤a de Inicio
print(add_time("11:43 PM", "24:20", "tueSday"))
# Salidas:
# 12:03 AM, Thursday (2 days later)

# Ejemplo 5: Gran Duraci칩n
print(add_time("6:30 PM", "205:12"))
# Salidas:
# 7:42 AM (9 days later)

# Manejo de Errores
# El c칩digo asume que las entradas son v치lidas seg칰n las reglas del 
# problema. No se realizan validaciones adicionales porque no es necesario 
# importar bibliotecas ni manejar casos inv치lidos.
